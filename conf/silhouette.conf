silhouette {

  # Authenticator settings
  authenticator.cookieName="authenticator"
  authenticator.cookiePath="/"
  authenticator.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  authenticator.httpOnlyCookie=true
  authenticator.useFingerprinting=true
  authenticator.authenticatorIdleTimeout=30 minutes
  authenticator.authenticatorExpiry=12 hours

  authenticator.rememberMe.cookieMaxAge=30 days
  authenticator.rememberMe.authenticatorIdleTimeout=5 days
  authenticator.rememberMe.authenticatorExpiry=30 days

  authenticator.signer.key = "[changeme]" // A unique encryption key
  authenticator.crypter.key = "[changeme]" // A unique encryption key

  # Auth info collection name 
  persistence.reactivemongo.collection.OAuth1Info = "silhouette.password"
  persistence.reactivemongo.collection.OAuth2Info = "silhouette.password"
  persistence.reactivemongo.collection.OpenIDInfo = "silhouette.password"
  persistence.reactivemongo.collection.PasswordInfo = "silhouette.password"

  # OAuth1 token secret provider settings
  oauth1TokenSecretProvider.cookieName="OAuth1TokenSecret"
  oauth1TokenSecretProvider.cookiePath="/"
  oauth1TokenSecretProvider.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  oauth1TokenSecretProvider.httpOnlyCookie=true
  oauth1TokenSecretProvider.expirationTime=5 minutes

  oauth1TokenSecretProvider.signer.key = "[changeme]" // A unique encryption key
  oauth1TokenSecretProvider.crypter.key = "[changeme]" // A unique encryption key

  # CSRF state item handler settings
  csrfStateItemHandler.cookieName="OAuth2State"
  csrfStateItemHandler.cookiePath="/"
  csrfStateItemHandler.secureCookie=false // Disabled for testing on localhost without SSL, otherwise cookie couldn't be set
  csrfStateItemHandler.httpOnlyCookie=true
  csrfStateItemHandler.expirationTime=5 minutes
  csrfStateItemHandler.signer.key = "[changeme]"

  # Social state handle
  socialStateHandler.signer.key = "[changeme]" // A unique encryption key

  # idme
  idme.authorizationURL="https://api.id.me/oauth/authorize"
  idme.accessTokenURL="https://api.id.me/oauth/token"
  idme.redirectURL="http://localhost:9000/authenticate/idme"
  idme.clientID=""
  idme.clientID=${?VETAFI_CLIENT_ID}
  idme.clientSecret=""
  idme.clientSecret=${?VETAFI_CLIENT_SECRET}
  idme.scope="military"
}
